// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for TodoCategory.
const (
	One   TodoCategory = "one"
	Three TodoCategory = "three"
	Two   TodoCategory = "two"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code *string `json:"code,omitempty"`

	// Message Error message
	Message *string `json:"message,omitempty"`
}

// Todo defines model for Todo.
type Todo struct {
	// Category Category
	Category TodoCategory `json:"category"`

	// Content Content
	Content *string `json:"content,omitempty"`

	// Id Id
	Id *string `json:"id,omitempty"`

	// Title Title
	Title string `json:"title"`
}

// TodoCategory Category
type TodoCategory string

// TodoList defines model for TodoList.
type TodoList struct {
	// Items List of todo items
	Items *[]Todo `json:"items,omitempty"`

	// Total Total number of items
	Total *int `json:"total,omitempty"`
}

// TodoControllerGetListParams defines parameters for TodoControllerGetList.
type TodoControllerGetListParams struct {
	// Offset Starting index of items to get
	Offset *int `form:"Offset,omitempty" json:"Offset,omitempty"`

	// Limit Maximum number of items to get
	Limit *int `form:"Limit,omitempty" json:"Limit,omitempty"`
}

// TodoControllerPostJSONRequestBody defines body for TodoControllerPost for application/json ContentType.
type TodoControllerPostJSONRequestBody = Todo

// TodoControllerUpdateJSONRequestBody defines body for TodoControllerUpdate for application/json ContentType.
type TodoControllerUpdateJSONRequestBody = Todo

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// TodoControllerGetList request
	TodoControllerGetList(ctx context.Context, params *TodoControllerGetListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TodoControllerPost request with any body
	TodoControllerPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TodoControllerPost(ctx context.Context, body TodoControllerPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TodoControllerDelete request
	TodoControllerDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TodoControllerGet request
	TodoControllerGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TodoControllerUpdate request with any body
	TodoControllerUpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TodoControllerUpdate(ctx context.Context, id string, body TodoControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) TodoControllerGetList(ctx context.Context, params *TodoControllerGetListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTodoControllerGetListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TodoControllerPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTodoControllerPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TodoControllerPost(ctx context.Context, body TodoControllerPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTodoControllerPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TodoControllerDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTodoControllerDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TodoControllerGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTodoControllerGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TodoControllerUpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTodoControllerUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TodoControllerUpdate(ctx context.Context, id string, body TodoControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTodoControllerUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewTodoControllerGetListRequest generates requests for TodoControllerGetList
func NewTodoControllerGetListRequest(server string, params *TodoControllerGetListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTodoControllerPostRequest calls the generic TodoControllerPost builder with application/json body
func NewTodoControllerPostRequest(server string, body TodoControllerPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTodoControllerPostRequestWithBody(server, "application/json", bodyReader)
}

// NewTodoControllerPostRequestWithBody generates requests for TodoControllerPost with any type of body
func NewTodoControllerPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTodoControllerDeleteRequest generates requests for TodoControllerDelete
func NewTodoControllerDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTodoControllerGetRequest generates requests for TodoControllerGet
func NewTodoControllerGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTodoControllerUpdateRequest calls the generic TodoControllerUpdate builder with application/json body
func NewTodoControllerUpdateRequest(server string, id string, body TodoControllerUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTodoControllerUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTodoControllerUpdateRequestWithBody generates requests for TodoControllerUpdate with any type of body
func NewTodoControllerUpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/todos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// TodoControllerGetList request
	TodoControllerGetListWithResponse(ctx context.Context, params *TodoControllerGetListParams, reqEditors ...RequestEditorFn) (*TodoControllerGetListResponse, error)

	// TodoControllerPost request with any body
	TodoControllerPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TodoControllerPostResponse, error)

	TodoControllerPostWithResponse(ctx context.Context, body TodoControllerPostJSONRequestBody, reqEditors ...RequestEditorFn) (*TodoControllerPostResponse, error)

	// TodoControllerDelete request
	TodoControllerDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*TodoControllerDeleteResponse, error)

	// TodoControllerGet request
	TodoControllerGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*TodoControllerGetResponse, error)

	// TodoControllerUpdate request with any body
	TodoControllerUpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TodoControllerUpdateResponse, error)

	TodoControllerUpdateWithResponse(ctx context.Context, id string, body TodoControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TodoControllerUpdateResponse, error)
}

type TodoControllerGetListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TodoList
}

// Status returns HTTPResponse.Status
func (r TodoControllerGetListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TodoControllerGetListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TodoControllerPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Todo
}

// Status returns HTTPResponse.Status
func (r TodoControllerPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TodoControllerPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TodoControllerDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TodoControllerDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TodoControllerDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TodoControllerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Todo
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TodoControllerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TodoControllerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TodoControllerUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Todo
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TodoControllerUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TodoControllerUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TodoControllerGetListWithResponse request returning *TodoControllerGetListResponse
func (c *ClientWithResponses) TodoControllerGetListWithResponse(ctx context.Context, params *TodoControllerGetListParams, reqEditors ...RequestEditorFn) (*TodoControllerGetListResponse, error) {
	rsp, err := c.TodoControllerGetList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTodoControllerGetListResponse(rsp)
}

// TodoControllerPostWithBodyWithResponse request with arbitrary body returning *TodoControllerPostResponse
func (c *ClientWithResponses) TodoControllerPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TodoControllerPostResponse, error) {
	rsp, err := c.TodoControllerPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTodoControllerPostResponse(rsp)
}

func (c *ClientWithResponses) TodoControllerPostWithResponse(ctx context.Context, body TodoControllerPostJSONRequestBody, reqEditors ...RequestEditorFn) (*TodoControllerPostResponse, error) {
	rsp, err := c.TodoControllerPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTodoControllerPostResponse(rsp)
}

// TodoControllerDeleteWithResponse request returning *TodoControllerDeleteResponse
func (c *ClientWithResponses) TodoControllerDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*TodoControllerDeleteResponse, error) {
	rsp, err := c.TodoControllerDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTodoControllerDeleteResponse(rsp)
}

// TodoControllerGetWithResponse request returning *TodoControllerGetResponse
func (c *ClientWithResponses) TodoControllerGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*TodoControllerGetResponse, error) {
	rsp, err := c.TodoControllerGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTodoControllerGetResponse(rsp)
}

// TodoControllerUpdateWithBodyWithResponse request with arbitrary body returning *TodoControllerUpdateResponse
func (c *ClientWithResponses) TodoControllerUpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TodoControllerUpdateResponse, error) {
	rsp, err := c.TodoControllerUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTodoControllerUpdateResponse(rsp)
}

func (c *ClientWithResponses) TodoControllerUpdateWithResponse(ctx context.Context, id string, body TodoControllerUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TodoControllerUpdateResponse, error) {
	rsp, err := c.TodoControllerUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTodoControllerUpdateResponse(rsp)
}

// ParseTodoControllerGetListResponse parses an HTTP response from a TodoControllerGetListWithResponse call
func ParseTodoControllerGetListResponse(rsp *http.Response) (*TodoControllerGetListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TodoControllerGetListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TodoList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTodoControllerPostResponse parses an HTTP response from a TodoControllerPostWithResponse call
func ParseTodoControllerPostResponse(rsp *http.Response) (*TodoControllerPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TodoControllerPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Todo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTodoControllerDeleteResponse parses an HTTP response from a TodoControllerDeleteWithResponse call
func ParseTodoControllerDeleteResponse(rsp *http.Response) (*TodoControllerDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TodoControllerDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTodoControllerGetResponse parses an HTTP response from a TodoControllerGetWithResponse call
func ParseTodoControllerGetResponse(rsp *http.Response) (*TodoControllerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TodoControllerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Todo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTodoControllerUpdateResponse parses an HTTP response from a TodoControllerUpdateWithResponse call
func ParseTodoControllerUpdateResponse(rsp *http.Response) (*TodoControllerUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TodoControllerUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Todo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of todo items
	// (GET /todos)
	TodoControllerGetList(ctx echo.Context, params TodoControllerGetListParams) error
	// Create a todo item
	// (POST /todos)
	TodoControllerPost(ctx echo.Context) error
	// Delete a todo item
	// (DELETE /todos/{id})
	TodoControllerDelete(ctx echo.Context, id string) error
	// Get a todo item
	// (GET /todos/{id})
	TodoControllerGet(ctx echo.Context, id string) error
	// Update a todo item
	// (PUT /todos/{id})
	TodoControllerUpdate(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// TodoControllerGetList converts echo context to params.
func (w *ServerInterfaceWrapper) TodoControllerGetList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TodoControllerGetListParams
	// ------------- Optional query parameter "Offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "Offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Offset: %s", err))
	}

	// ------------- Optional query parameter "Limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "Limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TodoControllerGetList(ctx, params)
	return err
}

// TodoControllerPost converts echo context to params.
func (w *ServerInterfaceWrapper) TodoControllerPost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TodoControllerPost(ctx)
	return err
}

// TodoControllerDelete converts echo context to params.
func (w *ServerInterfaceWrapper) TodoControllerDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TodoControllerDelete(ctx, id)
	return err
}

// TodoControllerGet converts echo context to params.
func (w *ServerInterfaceWrapper) TodoControllerGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TodoControllerGet(ctx, id)
	return err
}

// TodoControllerUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TodoControllerUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TodoControllerUpdate(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/todos", wrapper.TodoControllerGetList)
	router.POST(baseURL+"/todos", wrapper.TodoControllerPost)
	router.DELETE(baseURL+"/todos/:id", wrapper.TodoControllerDelete)
	router.GET(baseURL+"/todos/:id", wrapper.TodoControllerGet)
	router.PUT(baseURL+"/todos/:id", wrapper.TodoControllerUpdate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/jNhD9K8S0RyG296MH3bq77SJFil10U/QQGAtGHNncSiRDjlIbhv57MaQsy1a8",
	"StG0RYBeElkczbx5781IOyhs7axBQwHyHYRijbWMlz94bz1fOG8detIYbxdWIf9XGAqvHWlrIE/BIp5l",
	"gBtZuwohB23uZaXVZ4/BNr7Az1pBBh6l+mCqLeTkG8yAto6DA3ltVtBmUGMIcnW2zP54WOmXroLY2kZ4",
	"vGswECqhLAZhLAnc6EAX08VbjrhrtEcF+U2PZNkH2tsvWBCjvLbKMsQexA4KSbiyfstxhgEW1hAaghze",
	"NFtR6+p3xqAV5LCADEhTRB/W1rmu+RO6+4ynXLzdn2SApqkZbapJf1j+u/Y4xH1gt8c0ytgdDHkdwq7l",
	"5grNitaQv3j93QOZua/TpJfqKN/iMfp3tJymuo63h9l63o7ALeZTshYH7lKtc/pe6UAnGmvCOkB+8yRq",
	"P0USxm5JVpAvRvbpwJ4yyW0JWwqyyooUkx1iv/VYQg7fzA67YdYthlk0fXtWQ+m93EYJE6KRhHxbmKa+",
	"Rc8A9rV7fhdnU2tDuEI/0nKfIlUcC9lmELBovKbtJ24iEXOL0qM/XP1ofS2Z9J9+u4Ys7UHO0sX1WddE",
	"DlpOqk1p00I0JAt2SZuNulVWfP/xUgSHhS51IePBQcTIZgb36EN6YnExZ/asQyOdhhxeXswvXkIGTtI6",
	"Ap+xZvFqhdGaLHfMe6m6jDzH3lYV+vdI0cH8vJc1Evpk3WOcn0h60mYltFG46XURZAUXYXlcFfd+UkTz",
	"Q3cNxgEyMhL1oSxDjE1OSdKXsqkI8vlA4NcZ1NromjfWfCxuBoG2kZvS+jpOyDHWn+WGHz710F/CeqVr",
	"fQbqYoiVf9SpHv+YD6AvpqEv2afBWROS5V7M53u/dOtXOld1pph9CdzeboBpagyjstGKJ2o2RYEhHDk/",
	"ir73/M2SsYWmrmXcO++RhBTVQzuB5IoNk4y65PViw6TrPtpoue4t/Maq7ZP2nXo+rADWuR1xvfgHav5N",
	"nt96lIRCHigeM9xm3YTPdlq1yZoVEk5x/i5FTQx6/5V0+e5k6fZTU8oq7MeGl85harpvtyHtwxEavcX3",
	"0xB0rPLAPLwavyB6UjN4lc6fRMP0MfuAiD0j/JFY2saox+uZOP+6ntkj1/QzU27+703XMzBCWqBfdYFr",
	"Jl3wq1PyOYzwf7nV//fd0HfJMRMvlJjM3+/d1PgKcphBu2z/DAAA//8eUZ6Q/Q8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
